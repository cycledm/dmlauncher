/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from "./routes/__root";
import { Route as AppRouteRouteImport } from "./routes/app/route";
import { Route as IndexRouteImport } from "./routes/index";
import { Route as AppIndexRouteImport } from "./routes/app/index";
import { Route as AppJavaRouteRouteImport } from "./routes/app/java/route";
import { Route as AppTemplateIndexRouteImport } from "./routes/app/template/index";
import { Route as AppSettingsIndexRouteImport } from "./routes/app/settings/index";
import { Route as AppJavaIndexRouteImport } from "./routes/app/java/index";
import { Route as AppHomeIndexRouteImport } from "./routes/app/home/index";
import { Route as AppDownloadsIndexRouteImport } from "./routes/app/downloads/index";
import { Route as AppJavaVersionRouteImport } from "./routes/app/java/$version";

const AppRouteRoute = AppRouteRouteImport.update({
  id: "/app",
  path: "/app",
  getParentRoute: () => rootRouteImport,
} as any);
const IndexRoute = IndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRouteImport,
} as any);
const AppIndexRoute = AppIndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => AppRouteRoute,
} as any);
const AppJavaRouteRoute = AppJavaRouteRouteImport.update({
  id: "/java",
  path: "/java",
  getParentRoute: () => AppRouteRoute,
} as any);
const AppTemplateIndexRoute = AppTemplateIndexRouteImport.update({
  id: "/template/",
  path: "/template/",
  getParentRoute: () => AppRouteRoute,
} as any);
const AppSettingsIndexRoute = AppSettingsIndexRouteImport.update({
  id: "/settings/",
  path: "/settings/",
  getParentRoute: () => AppRouteRoute,
} as any);
const AppJavaIndexRoute = AppJavaIndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => AppJavaRouteRoute,
} as any);
const AppHomeIndexRoute = AppHomeIndexRouteImport.update({
  id: "/home/",
  path: "/home/",
  getParentRoute: () => AppRouteRoute,
} as any);
const AppDownloadsIndexRoute = AppDownloadsIndexRouteImport.update({
  id: "/downloads/",
  path: "/downloads/",
  getParentRoute: () => AppRouteRoute,
} as any);
const AppJavaVersionRoute = AppJavaVersionRouteImport.update({
  id: "/$version",
  path: "/$version",
  getParentRoute: () => AppJavaRouteRoute,
} as any);

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/app": typeof AppRouteRouteWithChildren;
  "/app/java": typeof AppJavaRouteRouteWithChildren;
  "/app/": typeof AppIndexRoute;
  "/app/java/$version": typeof AppJavaVersionRoute;
  "/app/downloads": typeof AppDownloadsIndexRoute;
  "/app/home": typeof AppHomeIndexRoute;
  "/app/java/": typeof AppJavaIndexRoute;
  "/app/settings": typeof AppSettingsIndexRoute;
  "/app/template": typeof AppTemplateIndexRoute;
}
export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/app": typeof AppIndexRoute;
  "/app/java/$version": typeof AppJavaVersionRoute;
  "/app/downloads": typeof AppDownloadsIndexRoute;
  "/app/home": typeof AppHomeIndexRoute;
  "/app/java": typeof AppJavaIndexRoute;
  "/app/settings": typeof AppSettingsIndexRoute;
  "/app/template": typeof AppTemplateIndexRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  "/": typeof IndexRoute;
  "/app": typeof AppRouteRouteWithChildren;
  "/app/java": typeof AppJavaRouteRouteWithChildren;
  "/app/": typeof AppIndexRoute;
  "/app/java/$version": typeof AppJavaVersionRoute;
  "/app/downloads/": typeof AppDownloadsIndexRoute;
  "/app/home/": typeof AppHomeIndexRoute;
  "/app/java/": typeof AppJavaIndexRoute;
  "/app/settings/": typeof AppSettingsIndexRoute;
  "/app/template/": typeof AppTemplateIndexRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | "/app"
    | "/app/java"
    | "/app/"
    | "/app/java/$version"
    | "/app/downloads"
    | "/app/home"
    | "/app/java/"
    | "/app/settings"
    | "/app/template";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | "/app"
    | "/app/java/$version"
    | "/app/downloads"
    | "/app/home"
    | "/app/java"
    | "/app/settings"
    | "/app/template";
  id:
    | "__root__"
    | "/"
    | "/app"
    | "/app/java"
    | "/app/"
    | "/app/java/$version"
    | "/app/downloads/"
    | "/app/home/"
    | "/app/java/"
    | "/app/settings/"
    | "/app/template/";
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  AppRouteRoute: typeof AppRouteRouteWithChildren;
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/app": {
      id: "/app";
      path: "/app";
      fullPath: "/app";
      preLoaderRoute: typeof AppRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/app/": {
      id: "/app/";
      path: "/";
      fullPath: "/app/";
      preLoaderRoute: typeof AppIndexRouteImport;
      parentRoute: typeof AppRouteRoute;
    };
    "/app/java": {
      id: "/app/java";
      path: "/java";
      fullPath: "/app/java";
      preLoaderRoute: typeof AppJavaRouteRouteImport;
      parentRoute: typeof AppRouteRoute;
    };
    "/app/template/": {
      id: "/app/template/";
      path: "/template";
      fullPath: "/app/template";
      preLoaderRoute: typeof AppTemplateIndexRouteImport;
      parentRoute: typeof AppRouteRoute;
    };
    "/app/settings/": {
      id: "/app/settings/";
      path: "/settings";
      fullPath: "/app/settings";
      preLoaderRoute: typeof AppSettingsIndexRouteImport;
      parentRoute: typeof AppRouteRoute;
    };
    "/app/java/": {
      id: "/app/java/";
      path: "/";
      fullPath: "/app/java/";
      preLoaderRoute: typeof AppJavaIndexRouteImport;
      parentRoute: typeof AppJavaRouteRoute;
    };
    "/app/home/": {
      id: "/app/home/";
      path: "/home";
      fullPath: "/app/home";
      preLoaderRoute: typeof AppHomeIndexRouteImport;
      parentRoute: typeof AppRouteRoute;
    };
    "/app/downloads/": {
      id: "/app/downloads/";
      path: "/downloads";
      fullPath: "/app/downloads";
      preLoaderRoute: typeof AppDownloadsIndexRouteImport;
      parentRoute: typeof AppRouteRoute;
    };
    "/app/java/$version": {
      id: "/app/java/$version";
      path: "/$version";
      fullPath: "/app/java/$version";
      preLoaderRoute: typeof AppJavaVersionRouteImport;
      parentRoute: typeof AppJavaRouteRoute;
    };
  }
}

interface AppJavaRouteRouteChildren {
  AppJavaVersionRoute: typeof AppJavaVersionRoute;
  AppJavaIndexRoute: typeof AppJavaIndexRoute;
}

const AppJavaRouteRouteChildren: AppJavaRouteRouteChildren = {
  AppJavaVersionRoute: AppJavaVersionRoute,
  AppJavaIndexRoute: AppJavaIndexRoute,
};

const AppJavaRouteRouteWithChildren = AppJavaRouteRoute._addFileChildren(
  AppJavaRouteRouteChildren,
);

interface AppRouteRouteChildren {
  AppJavaRouteRoute: typeof AppJavaRouteRouteWithChildren;
  AppIndexRoute: typeof AppIndexRoute;
  AppDownloadsIndexRoute: typeof AppDownloadsIndexRoute;
  AppHomeIndexRoute: typeof AppHomeIndexRoute;
  AppSettingsIndexRoute: typeof AppSettingsIndexRoute;
  AppTemplateIndexRoute: typeof AppTemplateIndexRoute;
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppJavaRouteRoute: AppJavaRouteRouteWithChildren,
  AppIndexRoute: AppIndexRoute,
  AppDownloadsIndexRoute: AppDownloadsIndexRoute,
  AppHomeIndexRoute: AppHomeIndexRoute,
  AppSettingsIndexRoute: AppSettingsIndexRoute,
  AppTemplateIndexRoute: AppTemplateIndexRoute,
};

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
);

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRouteRoute: AppRouteRouteWithChildren,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
